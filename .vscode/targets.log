make all --print-data-base --no-builtin-variables --no-builtin-rules --question
make: *** No rule to make target 'all'.  Stop.

# GNU Make 4.3
# Built for x86_64-pc-linux-gnu
# Copyright (C) 1988-2020 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

# Make data base, printed on Mon Aug  8 16:25:13 2022

# Variables

# makefile (from 'Makefile', line 10)
PHP_EXEC := @USER_ID=1000 GROUP_ID=1000 docker exec -i -u root labstag_phpfpm.1.$$(docker service ps -f 'name=labstag_phpfpm' labstag_phpfpm -q --no-trunc | head -n1) php -d memory_limit=-1
# environment
LC_ALL = C
# makefile (from 'make/docker/Makefile', line 6)
DOCKER_LAUNCH := USER_ID=1000 GROUP_ID=1000 docker
# environment
LC_NAME = fr_FR.UTF-8
# environment
LC_NUMERIC = fr_FR.UTF-8
# environment
VSCODE_CWD = /home/koromerzhin
# makefile (from 'make/docker/Makefile', line 4)
GROUP := 1000
# makefile (from 'make/general/Makefile', line 3)
GENERAL_SUPPORTED_COMMANDS := contributors sleep
# environment
NVM_DIR = /home/koromerzhin/.nvm
# makefile (from 'Makefile', line 15)
COMMANDS_SUPPORTS_MAKE_ARGS := all
# environment
LC_ADDRESS = fr_FR.UTF-8
# default
MAKE_COMMAND := make
# environment
VSCODE_HANDLES_SIGPIPE = true
# automatic
@D = $(patsubst %/,%,$(dir $@))
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# makefile (from 'make/general/Makefile', line 4)
GENERAL_SUPPORTS_MAKE_ARGS := 
# default
.VARIABLES := 
# environment
PWD = /home/dvp/perso/projects/labstag
# automatic
%D = $(patsubst %/,%,$(dir $%))
# environment
LSCOLORS = Gxfxcxdxbxegedabagacad
# environment
MAIL = /var/spool/mail/koromerzhin
# makefile (from 'make/docker/Makefile', line 34)
Docker_create_network = 	docker network create --driver=overlay $(1);
# environment
XDG_DATA_DIRS = /home/koromerzhin/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop
# environment
OLDPWD = /home/koromerzhin
# automatic
^D = $(patsubst %/,%,$(dir $^))
# automatic
%F = $(notdir $%)
# environment
LANG = C
# default
.LOADED := 
# default
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# makefile
MAKEFLAGS = pqrR
# makefile
CURDIR := /home/dvp/perso/projects/labstag
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = true
# automatic
*D = $(patsubst %/,%,$(dir $*))
# makefile (from 'Makefile', line 6)
PHPFPMFULLNAME := labstag_phpfpm.1.$$(docker service ps -f 'name=labstag_phpfpm' labstag_phpfpm -q --no-trunc | head -n1)
# environment
MFLAGS = -pqrR
# environment
SSH_AUTH_SOCK = /tmp/ssh-XXXXXXSXC8MC/agent.4222
# default
.SHELLFLAGS := -c
# makefile (from 'make/docker/Makefile', line 12)
DOCKER_SUPPORTS_MAKE_ARGS := 
# automatic
+D = $(patsubst %/,%,$(dir $+))
# makefile (from 'make/docker/Makefile', line 1)
MAKEFILE_LIST := Makefile make/general/Makefile make/docker/Makefile
# automatic
@F = $(notdir $@)
# environment
ZSH = /home/koromerzhin/.oh-my-zsh
# environment
XDG_SESSION_TYPE = tty
# automatic
?D = $(patsubst %/,%,$(dir $?))
# makefile (from 'Makefile', line 3)
NETWORK := proxylampy
# automatic
*F = $(notdir $*)
# makefile (from 'make/general/Makefile', line 18)
array_arguments = 	@declare -A PROVS=(${1}) ; for key in "$${!PROVS[@]}" ; do printf "${NEED}" $${key} "$${PROVS[$${key}]}"; done
# makefile (from 'Makefile', line 14)
COMMANDS_SUPPORTED_COMMANDS := workflow-png tests messenger linter install git encore composer bdd setbdd geocode
# environment
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# automatic
<D = $(patsubst %/,%,$(dir $<))
# environment
ZNT_REPO_DIR = /home/koromerzhin/.oh-my-zsh/plugins/zsh-navigation-tools
# environment
VSCODE_NLS_CONFIG = {"locale":"fr","availableLanguages":{"*":"fr"},"_languagePackId":"b0bb751258a71d5203cf053d90ac9f6f.fr","_translationsConfigFile":"/home/koromerzhin/.vscode-server/data/clp/b0bb751258a71d5203cf053d90ac9f6f.fr/tcf.json","_cacheRoot":"/home/koromerzhin/.vscode-server/data/clp/b0bb751258a71d5203cf053d90ac9f6f.fr","_resolvedLanguagePackCoreLocation":"/home/koromerzhin/.vscode-server/data/clp/b0bb751258a71d5203cf053d90ac9f6f.fr/da76f93349a72022ca4670c1b84860304616aaa2","_corruptedFile":"/home/koromerzhin/.vscode-server/data/clp/b0bb751258a71d5203cf053d90ac9f6f.fr/corrupted.info","_languagePackSupport":true}
# default
MAKE_HOST := x86_64-pc-linux-gnu
# makefile
SHELL = /bin/sh
# default
MAKECMDGOALS := all
# makefile (from 'Makefile', line 8)
DOCKER_EXECPHP := @USER_ID=1000 GROUP_ID=1000 docker exec -i -u root labstag_phpfpm.1.$$(docker service ps -f 'name=labstag_phpfpm' labstag_phpfpm -q --no-trunc | head -n1)
# environment
SHLVL = 1
# environment
MAKELEVEL := 0
# default
MAKE = $(MAKE_COMMAND)
# environment
PATH = /home/koromerzhin/.vscode-server/bin/da76f93349a72022ca4670c1b84860304616aaa2/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/var/lib/snapd/snap/bin:/home/koromerzhin/.npm-packages/bin
# default
MAKEFILES := 
# environment
LANGUAGE = fr_FR
# makefile (from 'Makefile', line 11)
SYMFONY_EXEC := @USER_ID=1000 GROUP_ID=1000 docker exec -i -u root labstag_phpfpm.1.$$(docker service ps -f 'name=labstag_phpfpm' labstag_phpfpm -q --no-trunc | head -n1) symfony console
# environment
LC_MONETARY = fr_FR.UTF-8
# environment
MOTD_SHOWN = pam
# automatic
^F = $(notdir $^)
# makefile (from 'make/general/Makefile', line 13)
PURPLE := \033[0;35m
# makefile (from 'make/general/Makefile', line 12)
YELLOW := \033[0;33m
# environment
LC_TIME = fr_FR.UTF-8
# makefile (from 'Makefile', line 12)
COMPOSER_EXEC := @USER_ID=1000 GROUP_ID=1000 docker exec -i -u root labstag_phpfpm.1.$$(docker service ps -f 'name=labstag_phpfpm' labstag_phpfpm -q --no-trunc | head -n1) symfony composer
# environment
SSH_CLIENT = 212.114.29.151 57719 22
# makefile (from 'Makefile', line 17)
COMMANDS_ARGS := 
# makefile (from 'make/general/Makefile', line 10)
GREEN := \033[0;32m
# environment
LC_TELEPHONE = fr_FR.UTF-8
# automatic
?F = $(notdir $?)
# makefile (from 'make/general/Makefile', line 16)
MISSING_ARGUMENTS := \033[0;31mARGUMENT missing\033[0m\n---\nmake \033[0;35m%s\033[0m \033[0;33mARGUMENT\033[0m\n---\n
# makefile (from 'make/docker/Makefile', line 38)
Docker_stack_container = 	@$(DOCKER_LAUNCH) stack services $(STACK) --format "{{.Name}}" | sed -e "s/^.*$(STACK)_//" | while read i; do printf "${NEED}" $$i $$i; done
# environment
LS_COLORS = 
# automatic
+F = $(notdir $+)
# environment
LESS = -R
# 'override' directive
GNUMAKEFLAGS := 
# environment
BROWSER = /home/koromerzhin/.vscode-server/bin/da76f93349a72022ca4670c1b84860304616aaa2/bin/helpers/browser.sh
# environment
LOGNAME = koromerzhin
# makefile (from 'make/general/Makefile', line 14)
NC := \033[0m
# makefile (from 'make/general/Makefile', line 1)
.DEFAULT_GOAL := help
# makefile (from 'make/general/Makefile', line 11)
RED := \033[0;31m
# makefile (from 'make/docker/Makefile', line 3)
USER := 1000
# makefile (from 'make/docker/Makefile', line 1)
LAMPY_NAME := lampy
# default
MAKE_VERSION := 4.3
# makefile (from 'make/general/Makefile', line 15)
NEED := \033[0;32m%-35s\033[0m: %s\n
# 'override' directive
.SHELLSTATUS := 0
# environment
LC_MEASUREMENT = fr_FR.UTF-8
# makefile (from 'make/docker/Makefile', line 9)
DOCKER_EXECTTY := USER_ID=1000 GROUP_ID=1000 docker exec -ti -u root
# environment
SSH_AGENT_PID = 4224
# environment
PAGER = less
# environment
VSCODE_AGENT_FOLDER = /home/koromerzhin/.vscode-server
# environment
_ = /usr/bin/make
# environment
LC_PAPER = fr_FR.UTF-8
# environment
XDG_RUNTIME_DIR = /run/user/1000
# environment
NVM_RC_VERSION = 
# environment
VSCODE_IPC_HOOK_CLI = /run/user/1000/vscode-ipc-353f7710-7a53-4845-8c02-4cca32608c9b.sock
# environment
NVM_CD_FLAGS = -q
# environment
XDG_SESSION_CLASS = user
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# environment
HOME = /home/koromerzhin
# environment
ELECTRON_RUN_AS_NODE = 1
# environment
ZNT_CONFIG_DIR = /home/koromerzhin/.config/znt
# environment
XDG_SESSION_ID = 94
# default
.RECIPEPREFIX := 
# automatic
<F = $(notdir $<)
# makefile (from 'make/docker/Makefile', line 8)
DOCKER_EXEC := USER_ID=1000 GROUP_ID=1000 docker exec -i -u root
# default
SUFFIXES := 
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell nocomment grouped-target extra-prereqs archives jobserver output-sync check-symlink guile load
# makefile (from 'make/docker/Makefile', line 11)
DOCKER_SUPPORTED_COMMANDS := update inspect ssh logs docker lampy
# environment
LC_IDENTIFICATION = fr_FR.UTF-8
# makefile (from 'Makefile', line 2)
STACK := labstag
# environment
SSH_CONNECTION = 212.114.29.151 57719 192.168.1.46 22
# variable set hash-table stats:
# Load=117/1024=11%, Rehash=0, Collisions=11/258=4%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# . (device 2066, inode 18220765): 29 files, no impossibilities.

# 29 files, no impossibilities in 1 directories.

# Implicit Rules

# No implicit rules.

# Files

translations: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 303):
	${SYMFONY_EXEC} translation:update --force --format=yaml --clean fr 

check: node_modules
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'make/general/Makefile', line 51):
	@make contributors check -i
	@make linter all -i
	@git status

update: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 104):
	@printf "${MISSING_ARGUMENTS}" update
	$(call Docker_stack_container)

composer: isdocker env
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 100):
	@printf "${MISSING_ARGUMENTS}" "composer"
	$(call array_arguments, \
		["dev"]="Installation version de dev" \
		["fund"]="Discover how to help fund the maintenance of your dependencies." \
		["i"]="install" \
		["outdated"]="Packet php outdated" \
		["prod"]="Installation version de prod" \
		["suggests"]="suggestions package pour PHP" \
		["u"]="COMPOSER update" \
		["validate"]="COMPOSER validate" \
	)
 

apps/phpcs.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 37):
	wget https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.6.2/phpcs.phar -O apps/phpcs.phar

phar: apps/phploc.phar apps/phpmd.phar apps/php-cs-fixer.phar apps/phpcbf.phar apps/phpcs.phar apps/phpstan.phar apps/phpDocumentor.phar apps/behat.phar
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
make/general/Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-05-09 14:32:05.330913177
#  File has been updated.
#  Successfully updated.

isdocker:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

inspect: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 95):
	@printf "${MISSING_ARGUMENTS}" inspect
	$(call Docker_stack_container)

# Not a target:
apps/composer.json:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

lampy: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 27):
	@cd lampy && make docker swarm-init
	@cd lampy && make docker create-network
	@cd lampy && make docker image-pull
	@cd lampy && make docker deploy
	@cd lampy && make sleep 60
	@cd lampy && make docker ls

docker: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 61):
	@printf "${MISSING_ARGUMENTS}" docker
	$(call array_arguments, \
		["create-network"]="create network" \
		["deploy"]="deploy" \
		["image-pull"]="Get docker image" \
		["images"]="images" \
		["login"]="login" \
		["ls"]="docker service" \
		["stop"]="docker stop" \
		["swarm-init"]="swarm init" \
	)

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-05-25 15:15:58.861289523
#  File has been updated.
#  Successfully updated.

logs: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 77):
	@printf "${MISSING_ARGUMENTS}" logs
	$(call Docker_stack_container)

encore: node_modules
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 126):
	@printf "${MISSING_ARGUMENTS}" "encore"
	$(call array_arguments, \
		["build"]="créer les assets en version prod" \
		["dev-server"]="créer les assets en version dev-server" \
		["dev"]="créer les assets en version dev" \
		["watch"]="créer les assets en version watch" \
	)

apps/phpDocumentor.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 43):
	wget https://github.com/phpDocumentor/phpDocumentor/releases/download/v3.3.0/phpDocumentor.phar -O apps/phpDocumentor.phar

sleep:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/general/Makefile', line 27):
	@sleep  $(GENERAL_ARGS)

bddset:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 310):
	@cp database_init/01_labstag.sql lampy/mariadb_init/01_labstag.sql

# Not a target:
make/docker/Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-08-08 15:50:27.41286024
#  File has been updated.
#  Successfully updated.

assets: isdocker apps/.env
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 58):
	${SYMFONY_EXEC} assets:install public --symlink --relative

contributors: node_modules
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/general/Makefile', line 41):
	@printf "${MISSING_ARGUMENTS}" contributors
	$(call array_arguments, \
		["add"]="ADD" \
		["check"]="CHECK" \
		["generate"]="GENERATE" \
	)

apps/phpstan.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 40):
	wget https://github.com/phpstan/phpstan/releases/download/1.4.0/phpstan.phar -O apps/phpstan.phar

tests: isdocker phar
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 292):
	@printf "${MISSING_ARGUMENTS}" "tests"
	$(call array_arguments, \
		["behat"]="Lance les tests behat" \
		["launch"]="Launch all tests" \
		["simple-phpunit-unit-integration"]="lance les tests phpunit" \
		["simple-phpunit"]="lance les tests phpunit" \
	)

apps/phploc.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 25):
	wget https://phar.phpunit.de/phploc-7.0.2.phar -O apps/phploc.phar

messenger: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 275):
	@printf "${MISSING_ARGUMENTS}" "messenger"
	$(call array_arguments, \
		["consume"]="Messenger Consume" \
	)

git:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

init:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 22):
	@git submodule update --init --recursive --remote

# Not a target:
all:
#  Command line target.
#  Implicit rule search has been done.
#  File does not exist.
#  File has not been updated.

apps/php-cs-fixer.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 28):
	wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.5.0/php-cs-fixer.phar -O apps/php-cs-fixer.phar

help:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/general/Makefile', line 57):
	@grep -E '(^[a-zA-Z_-]+:.*? ## .*$$)|(^ ##)' $(MAKEFILE_LIST) | sed -e "s/^.*Makefile://" | awk 'BEGIN {FS = ":.*? ## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' | sed -e 's/\[32m##/[33m/'
	@printf "${YELLOW}commands with arguments${NC}\n"
	@grep -E '(^[a-zA-Z_-]+:.*? ### .*$$)|(^ ###)' $(MAKEFILE_LIST) | sed -e "s/^.*Makefile://" | awk 'BEGIN {FS = ":.*? ### "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' | sed -e 's/\[32m##/[33m/'

bdd: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 69):
	@printf "${MISSING_ARGUMENTS}" "bdd"
	$(call array_arguments, \
		["fixtures"]="fixtures" \
		["migrate"]="migrate database" \
		["validate"]="bdd validate" \
	)

node_modules:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'make/general/Makefile', line 30):
	@npm install

apps/.env:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 79):
	@echo "APP_ENV=dev" > apps/.env

apps/vendor: isdocker apps/composer.json
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 54):
	${COMPOSER_EXEC} install --no-progress --prefer-dist --optimize-autoloader
	

env:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

workflow-png: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 307):
	${SYMFONY_EXEC} workflow:dump $(COMMANDS_ARGS) | dot -Tpng -O $(COMMANDS_ARGS).png

install: node_modules apps/.env
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 159):
	@printf "${MISSING_ARGUMENTS}" "install"
	$(call array_arguments, \
		["all"]="common" \
		["dev"]="dev" \
		["prod"]="prod" \
	)

apps/phpmd.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 31):
	wget https://github.com/phpmd/phpmd/releases/download/2.11.1/phpmd.phar -O apps/phpmd.phar

apps/phpcbf.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
 
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 34):
	wget https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.6.2/phpcbf.phar -O apps/phpcbf.phar

commands: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 169):
	$(SYMFONY_EXEC) labstag:install --all
	$(SYMFONY_EXEC) labstag:guard-route
	$(SYMFONY_EXEC) labstag:workflows-show

linter: isdocker phar node_modules
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 240):
	@printf "${MISSING_ARGUMENTS}" "linter"
	$(call array_arguments, \
		["all"]="## Launch all linter" \
		["compo"]="composer" \
		["container"]="indique les erreurs de code de container" \
		["eslint-fix"]="fixe le code JavaScript à partir d'un standard" \
		["eslint"]="indique les erreurs sur le code JavaScript à partir d'un standard" \
		["jscpd-report"]="Copy paste detector report" \
		["jscpd"]="Copy paste detector" \
		["php-cs-fixer"]="fixe le code PHP à partir d'un standard" \
		["phpaudit"]="AUDIT PHP" \
		["phpcbf"]="fixe le code PHP à partir d'un standard" \
		["phpcs-onlyerror"]="indique les erreurs de code non corrigé par PHPCBF" \
		["phpcs-onlywarning"]="indique les erreurs de code non corrigé par PHPCBF" \
		["phpcs"]="indique les erreurs de code non corrigé par PHPCBF" \
		["phpdoc"]="php doc" \
		["phpfix"]="PHP-CS-FIXER & PHPCBF" \
		["phploc"]="phploc" \
		["phpmd"]="indique quand le code PHP contient des erreurs de syntaxes ou des erreurs" \
		["phpmnd"]="Si des chiffres sont utilisé dans le code PHP" \
		["phpstan"]="regarde si le code PHP ne peux pas être optimisé" \
		["readme"]="linter README.md" \
		["rector"]="rector" \
		["stylelint-fix"]="fix les erreurs dans le code SCSS" \
		["stylelint"]="indique les erreurs dans le code SCSS" \
		["twig"]="indique les erreurs de code de twig" \
		["yaml"]="indique les erreurs de code de yaml" \
	)

apps/composer.lock: isdocker apps/composer.json
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 51):
	${COMPOSER_EXEC} update

ssh: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'make/docker/Makefile', line 86):
	@printf "${MISSING_ARGUMENTS}" ssh
	$(call Docker_stack_container)

.PHONY: sleep contributors git help isdocker lampy docker logs ssh inspect update assets bdd env composer encore geocode install commands linter messenger tests translations workflow-png
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

geocode: isdocker
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 137):
	$(SYMFONY_EXEC) labstag:geocode:install $(COMMANDS_ARGS)

apps/behat.phar:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 46):
	wget https://github.com/Behat/Behat/releases/download/v3.10.0/behat.phar -O apps/behat.phar

# files hash-table stats:
# Load=48/1024=5%, Rehash=0, Collisions=0/168=0%
# VPATH Search Paths

# No 'vpath' search paths.

# No general ('VPATH' variable) search path.

# strcache buffers: 1 (0) / strings = 76 / storage = 832 B / avg = 10 B
# current buf: size = 8162 B / used = 832 B / count = 76 / avg = 10 B

# strcache performance: lookups = 228 / hit rate = 66%
# hash-table stats:
# Load=76/8192=1%, Rehash=0, Collisions=0/228=0%
# Finished Make data base on Mon Aug  8 16:25:13 2022

 
